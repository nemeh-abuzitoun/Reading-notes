
CSS Multi-column Layout
CSS Multi-column Layout is a module of CSS that adds support for multi-column layouts. Support is included for establishing the number of columns in a layout, as well as how content should flow from column to column, gap sizes between columns, and column dividing lines (known as column rules) along with their appearance.

Basic example
In the following example the column-count property has been applied to the element with a class of container. As the value of column-count is 3, the content is arranged into 3 columns of equal size.



Relationship to Fragmentation
Multiple-column Layout is closely related to Paged Media, in that each column box becomes a fragment, much like a printed page becomes a fragment of an overall document. Therefore the properties now defined in the CSS Fragmentation specification are required in order to control how content breaks between columns. 

Reference
Multiple-column Layout Properties
column-count
column-fill
column-gap
column-rule
column-rule-color
column-rule-style
column-rule-width
column-span
column-width
columns
Related CSS Fragmentation Properties
break-after
break-before
break-inside
orphans
widows
Guides
Basic Concepts of Multicol
An overview of the Multiple-column Layout specification
Styling Columns
How to use column rules and manage the spacing between columns.
Spanning and Balancing
How to make elements span across all columns and controlling the way columns are filled.
Handling Overflow in Multicol
What happens when an item overflows the column it is in and what happens when there is too much columned content to fit a container.
Content Breaks in Multicol
Introduction to the Fragmentation specification and how to control where column content breaks.
Specifications
Specification	Status	Comment
CSS Multi-column Layout Module	Working Draft	Initial definition
See also
Other CSS layout technologies include:

CSS Flexible Box Layout (CSS flexbox)
CSS Grid Layout

Basic example
Reference
Guides
External resources
Specifications
CSS Grid Layout
CSS Grid Layout excels at dividing a page into major regions or defining the relationship in terms of size, position, and layer, between parts of a control built from HTML primitives.

Like tables, grid layout enables an author to align elements into columns and rows. However, many more layouts are either possible or easier with CSS grid than they were with tables. For example, a grid container's child elements could position themselves so they actually overlap and layer, similar to CSS positioned elements.

Basic example
The example below shows a three-column track grid with new rows created at a minimum of 100 pixels and a maximum of auto. Items have been placed onto the grid using line-based placement.

HTML
<div class="wrapper">
  <div class="one">One</div>
  <div class="two">Two</div>
  <div class="three">Three</div>
  <div class="four">Four</div>
  <div class="five">Five</div>
  <div class="six">Six</div>
</div>
Copy to Clipboard
CSS
.wrapper {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 10px;
  grid-auto-rows: minmax(100px, auto);
}
.one {
  grid-column: 1 / 3;
  grid-row: 1;
}
.two {
  grid-column: 2 / 4;
  grid-row: 1 / 3;
}
.three {
  grid-column: 1;
  grid-row: 2 / 5;
}
.four {
  grid-column: 3;
  grid-row: 3;
}
.five {
  grid-column: 2;
  grid-row: 4;
}
.six {
  grid-column: 3;
  grid-row: 4;
}
Copy to Clipboard
